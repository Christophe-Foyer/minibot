# Base image: ROS Noetic (Ubuntu 20.04)
FROM ros:noetic-ros-core

# Install build tools and dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    usbutils \
    libusb-1.0-0-dev \
    ros-noetic-catkin \
    ros-noetic-message-generation \
    ros-noetic-message-runtime \
    ros-noetic-dynamic-reconfigure \
    ros-noetic-camera-info-manager \
    ros-noetic-image-transport \
    ros-noetic-cv-bridge \
    ros-noetic-tf \
    ros-noetic-tf2-ros \
    ros-noetic-tf2-geometry-msgs \
    && rm -rf /var/lib/apt/lists/*

# Create catkin workspace
WORKDIR /root/catkin_ws/src

# Clone the Vzense ROS plugin
RUN git clone https://github.com/Vzense/Vzense_ROS_Plugin_Linux.git

# Get the correct binaries
RUN set -eux; \
    arch=$(uname -m); \
    if [ "$arch" = "armv6l" ] || [ "$arch" = "armv7l" ]; then \
        subfolder="Arm-linux-gnueabihf"; \
    elif [ "$arch" = "aarch64" ]; then \
        subfolder="AArch64"; \
    else \
        subfolder="Ubuntu18.04"; \
    fi; \
    echo "Detected arch: $arch -> using subfolder: $subfolder"; \
    mkdir -p /root/catkin_ws/src/Vzense_ROS_Plugin_Linux/dependencies/Lib; \
    for sofile in $(curl -s https://api.github.com/repos/Vzense/Vzense_SDK_Linux/contents/$subfolder/Lib | grep '"download_url":' | cut -d'"' -f4); do \
        echo "Downloading $sofile"; \
        curl -L -o /root/catkin_ws/src/Vzense_ROS_Plugin_Linux/dependencies/Lib/$(basename $sofile) $sofile; \
    done

# Build the workspace (safe for Raspberry Pi)
WORKDIR /root/catkin_ws
RUN /bin/bash -c "source /opt/ros/noetic/setup.bash && catkin_make -j1"

# Source ROS and workspace on startup
RUN echo "source /opt/ros/noetic/setup.bash" >> /root/.bashrc && \
    echo "source /root/catkin_ws/devel/setup.bash" >> /root/.bashrc

# Default entrypoint
CMD ["bash", "-c", "source /opt/ros/noetic/setup.bash && source /root/catkin_ws/devel/setup.bash && sleep 3 && roslaunch --wait vzense_camera vzense_camera.launch"]
